"use client";

import { useState, useEffect } from 'react';
import { Thermometer, Waves, Ear } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { cn } from '@/lib/utils';

export default function IoTMonitorPage() {
  const [isSupported, setIsSupported] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [deviceData, setDeviceData] = useState({ temp: 'N/A', humidity: 'N/A', sound: 'N/A' });
  const [error, setError] = useState('');
  const [port, setPort] = useState<any>(null);
  const [rawData, setRawData] = useState('');
  const [debugMode, setDebugMode] = useState(false);
  const [reader, setReader] = useState<any>(null);
  const [isReconnecting, setIsReconnecting] = useState(false);
  const [isDisconnecting, setIsDisconnecting] = useState(false);
  const [shouldStopReading, setShouldStopReading] = useState(false);
  
  useEffect(() => {
    if ('serial' in navigator) {
      setIsSupported(true);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —Ä–∞–Ω–µ–µ
    const wasConnected = localStorage.getItem('iot-device-connected');
    if (wasConnected === 'true') {
      setIsReconnecting(true);
      setError('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
    } else {
      // –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –±—ã–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —Ä–∞–Ω–µ–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setIsReconnecting(false);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const handleBeforeUnload = () => {
      if (isConnected) {
        localStorage.setItem('iot-device-connected', 'true');
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [isConnected]);

  const handleConnect = async () => {
    try {
      setError('');
      setIsReconnecting(false);
      
      if (!('serial' in navigator)) {
        setError('Web Serial API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        return;
      }

      const newPort = await navigator.serial.requestPort();
      await newPort.open({ baudRate: 9600 });
      
      setPort(newPort);
      setIsConnected(true);
      localStorage.setItem('iot-device-connected', 'true');
      setShouldStopReading(false);
      
      // –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      readData(newPort);
      
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: ${err.message}`);
    }
  };

  const readData = async (newPort: any) => {
    try {
      const textDecoder = new TextDecoderStream();
      const readableStreamClosed = newPort.readable.pipeTo(textDecoder.writable);
      const reader = textDecoder.readable.getReader();
      setReader(reader);

      while (newPort.readable && !shouldStopReading) {
        try {
          const { value, done } = await reader.read();
          
          if (done) {
            console.log('–ü–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω');
            break;
          }
          
          if (value) {
            const data = value.trim();
            setRawData(data);
            
            try {
              const parsedData = JSON.parse(data);
              console.log('–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', parsedData);
              
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
              if (parsedData.temperature !== undefined && parsedData.humidity !== undefined) {
                // –§–æ—Ä–º–∞—Ç: {"temperature": 22.5, "humidity": 45.2, "sound_ao": 63, "sound_do": 1}
                const soundLevel = parsedData.sound_ao !== undefined ? parsedData.sound_ao : 'N/A';
                setDeviceData({
                  temp: `${parsedData.temperature}¬∞C`,
                  humidity: `${parsedData.humidity}%`,
                  sound: soundLevel !== 'N/A' ? `${soundLevel} dB` : 'N/A'
                });
              } else if (parsedData.temp !== undefined && parsedData.humidity !== undefined) {
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                setDeviceData({
                  temp: `${parsedData.temp}¬∞C`,
                  humidity: `${parsedData.humidity}%`,
                  sound: parsedData.sound || 'N/A'
                });
              }
            } catch (parseError) {
              console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
              console.log('–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Arduino:', data);
            }
          }
        } catch (readError) {
          if (!shouldStopReading) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:', readError);
          }
          break;
        }
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ readData:', err);
    }
  };

  const handleDisconnect = async () => {
    console.log("üß≠ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...");
    setIsDisconnecting(true);
    setShouldStopReading(true);
    setIsConnected(false);
    
    try {
      if (reader) {
        try {
          console.log("‚è∏Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–µ–º —á—Ç–µ–Ω–∏–µ...");
          await reader.cancel();
        } catch (e) {
          console.warn("reader.cancel() –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:", e);
        }
        try {
          reader.releaseLock();
        } catch (e) {
          console.warn("reader.releaseLock() –Ω–µ —É–¥–∞–ª–æ—Å—å:", e);
        }
      }
      if (port) {
        try {
          console.log("üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç...");
          await port.close();
        } catch (e) {
          console.warn("port.close() –Ω–µ —É–¥–∞–ª–æ—Å—å:", e);
        }
      }
    } catch (err) {
      console.error("‚ö†Ô∏è –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:", err);
    }
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    setDeviceData({ temp: 'N/A', humidity: 'N/A', sound: 'N/A' });
    setRawData('');
    setError('');
    setReader(null);
    setPort(null);
    localStorage.removeItem('iot-device-connected');
    console.log('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    setTimeout(() => {
      setIsDisconnecting(false);
      setShouldStopReading(false);
    }, 200);
  };

  if (!isSupported) {
    return (
      <div className="space-y-6">
        <div>
          <h2 className="text-2xl font-semibold font-headline">IoT –ú–æ–Ω–∏—Ç–æ—Ä</h2>
          <p className="text-muted-foreground">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å Arduino –¥–∞—Ç—á–∏–∫–æ–≤</p>
        </div>
        <Alert>
          <AlertTitle>Web Serial API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</AlertTitle>
          <AlertDescription>
            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Web Serial API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome, Edge –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –±—Ä–∞—É–∑–µ—Ä.
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-semibold font-headline">IoT –ú–æ–Ω–∏—Ç–æ—Ä</h2>
          <p className="text-muted-foreground">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å Arduino –¥–∞—Ç—á–∏–∫–æ–≤</p>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            onClick={() => setDebugMode(!debugMode)}
          >
            {debugMode ? '–°–∫—Ä—ã—Ç—å –æ—Ç–ª–∞–¥–∫—É' : '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–∫—É'}
          </Button>
          {isConnected ? (
            <Button
              variant="destructive"
              onClick={handleDisconnect}
              disabled={isDisconnecting}
            >
              {isDisconnecting ? '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...' : '–û—Ç–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'}
            </Button>
          ) : (
            <Button
              onClick={handleConnect}
              disabled={isReconnecting}
            >
              {isReconnecting ? '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'}
            </Button>
          )}
        </div>
      </div>

      {error && (
        <Alert variant="destructive">
          <AlertTitle>–û—à–∏–±–∫–∞</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <div className="grid gap-6 md:grid-cols-3">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</CardTitle>
            <Thermometer className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{deviceData.temp}</div>
            <p className="text-xs text-muted-foreground">
              –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">–í–ª–∞–∂–Ω–æ—Å—Ç—å</CardTitle>
            <Waves className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{deviceData.humidity}</div>
            <p className="text-xs text-muted-foreground">
              –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞</CardTitle>
            <Ear className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{deviceData.sound}</div>
            <p className="text-xs text-muted-foreground">
              –£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏
            </p>
          </CardContent>
        </Card>
      </div>

      {debugMode && (
        <Card>
          <CardHeader>
            <CardTitle>–ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏</CardTitle>
            <CardDescription>
              –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {JSON.stringify(deviceData)}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <p className="text-sm">
                <strong>–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Arduino:</strong> {rawData || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
              </p>
              <p className="text-sm">
                <strong>–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç JSON:</strong> {"{\"temperature\":22.5,\"humidity\":45.2,\"soundLevel\":35.8}"}
              </p>
              <p className="text-xs text-muted-foreground">
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤
              </p>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
